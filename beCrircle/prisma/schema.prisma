// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id        Int      @id @default(autoincrement())
  test      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  fullname  String
  email     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower  Follow[] @relation("follower")
  following Follow[] @relation("following")

  profile Profile?

  thread Thread[]

  like Like[] @relation("user")
}

model Follow {
  followerId  Int
  followingId Int

  follower  User     @relation("follower", fields: [followerId], references: [id])
  following User     @relation("following", fields: [followingId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followerId, followingId])
}

model Profile {
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  avatar String?
  cover  String?
  bio    String?

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thread {
  id      Int     @id @default(autoincrement())
  content String?
  userId  Int

  author User @relation(fields: [userId], references: [id])

  threadId Int?
  parent   Thread?  @relation("threadReplies", fields: [threadId], references: [id])
  replies  Thread[] @relation("threadReplies")

  like Like[] @relation("thread")

  image     ThreadImage[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Like {
  threadId  Int
  userId    Int
  thread    Thread   @relation("thread", fields: [threadId], references: [id])
  user      User     @relation("user", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([threadId, userId])
}

model ThreadImage {
  id        Int      @id @default(autoincrement())
  image     String
  threadId  Int
  thread    Thread   @relation(fields: [threadId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
